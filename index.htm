<!--
useful js

spawn item
World.spawnObject({"type":"item", "object_id":"heart_1", "count":1, "coords": {"x":1248, "y": 650} });

loop through tiles
for(var x=0; x<map_1.length; x++) { for(var y=0; y<map_1[x].length; y++) { console.log('x: '+x+' y: '+y+' name: '+name); } }

test camera range finder
setInterval( function() { console.log( Camera.getViewRange() ); }, 500 )

//combine both and display tiles within the camera view range
function render() {
	var render_count = 0;
	var view_range = Camera.getViewRange();
	//{top: 0, left: 0, right: 48, bottom: 27}
	for(var y=view_range.top; y<view_range.bottom; y++) {
		for(var x=view_range.left; x<view_range.right; x++) {
			render_count++;
			console.log('x: '+x+' y: '+y+' name: '+name);
		}
	}
	console.log(render_count);
	console.log('calculation: ' + ( (view_range.left + view_range.right) * view_range.bottom ));
}


-->

<!DOCTYPE html>
<html lang="en-us">
<head>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link rel="stylesheet" href="system/style.css">
	<link rel="stylesheet" href="system/boostrap.css">
</head>

<div id="canvas_parent">
	<!-- <div class="seasons_test_label" style="position: fixed; top: 55%; left: 50%; translate: -50% -50%; font-size:20px; padding: 3px 1px; width: 100px; text-align: center; color: white; background-color: rgba(255,255,255,.2); border: 1px solid white;">spring</div> -->
	
	<div style="position: fixed; top: 0; left: 0;cursor:pointer; font-size:12px;text-align: center; color: white;background-color: rgba(255,255,255,.2);">
		<div class="spawner" style="float:left;cursor:pointer;padding: 3px 3px; border: 1px solid white;" data-type="item" data-item-id="heart_1">heart</div>
		<div class="spawner" style="float:left;cursor:pointer;padding: 3px 3px; border: 1px solid white;" data-type="item" data-item-id="coin_1">coin</div>
		<div class="spawner" style="float:left;cursor:pointer;padding: 3px 3px; border: 1px solid white;" data-type="item" data-item-id="honey_1">honey</div>
		<div class="spawner" style="float:left;cursor:pointer;padding: 3px 3px; border: 1px solid white;" data-type="item" data-item-id="key_1">key</div>
		<div class="spawner" style="float:left;cursor:pointer;padding: 3px 3px; border: 1px solid white;" data-type="item" data-item-id="mush_1">mush</div>
		<div class="spawner" style="float:left;cursor:pointer;padding: 3px 3px; border: 1px solid white;" data-type="mob" data-item-id="mushroom_red">mushroom</div>
		<div class="spawner" style="float:left;cursor:pointer;padding: 3px 3px; border: 1px solid white;" data-type="mob" data-item-id="bee_1">bee</div>
		<div class="spawner" style="float:left;cursor:pointer;padding: 3px 3px; border: 1px solid white;" data-type="mob" data-item-id="bomb_gray">bomb</div>
		<div class="spawner" style="float:left;cursor:pointer;padding: 3px 3px; border: 1px solid white;" data-type="mob" data-item-id="balloon_blue">balloon</div>
	</div>
	<div style="position: fixed; top: 25px; left: 0;cursor:pointer; font-size:12px;text-align: center; color: white;background-color: rgba(255,255,255,.2);">
		<div class="set_season" style=" padding: 3px 3px;  border: 1px solid white;" data-season="spring">spring</div>
		<div class="set_season" style="padding: 3px 3px;  border: 1px solid white;" data-season="summer">summer</div>
		<div class="set_season" style=" padding: 3px 3px;  border: 1px solid white;" data-season="fall">fall</div>
		<div class="set_season" style=" padding: 3px 3px;  border: 1px solid white;" data-season="winter">winter</div>
		<div class="set_hair_style" style=" padding: 3px 3px;  border: 1px solid white;" data-hair="hair_1_m">hair male 1</div>
		<div class="set_hair_style" style=" padding: 3px 3px;  border: 1px solid white;" data-hair="hair_2_m">hair male 2</div>
		<div class="set_hair_style" style=" padding: 3px 3px;  border: 1px solid white;" data-hair="hair_3_f">hair female 1</div>
		<div class="set_hair_color" style=" padding: 3px 3px;  border: 1px solid white;" data-r="229" data-g="16" data-b="16">dye red</div>
		<div class="set_hair_color" style=" padding: 3px 3px;  border: 1px solid white;" data-r="229" data-g="16" data-b="128">dye pink</div>
		<div class="set_hair_color" style=" padding: 3px 3px;  border: 1px solid white;" data-r="16" data-g="83" data-b="229">dye blue</div>
		<div class="set_hair_color" style=" padding: 3px 3px;  border: 1px solid white;" data-r="16" data-g="16" data-b="16">dye black</div>
		<div class="set_hair_color" style=" padding: 3px 3px;  border: 1px solid white;" data-r="112" data-g="45" data-b="14">dye brown</div>
	</div>
	
	<div id="debug_mobile_controls" style="background-color:purple;position:fixed;top:0;left:0;"></div>
	
	<canvas></canvas>
</div>

<!--starting the game-->
<div id="start_menu">
	<div class="content">
		<div style="margin-top:270px;">
			<p class="small_fonts menu_font_lg">Adventures in <span class="color_blue">Flatlands</span></p>
			<a class="start_menu_play btn btn-primary" style="width:100px;margin:30px auto 0 auto;display:block;">Play</a>
		</div>
	</div>
</div>

<!--press ESC for in-game menu-->
<div id="ingame_menu">
	<div class="content">
		<div style="margin-top:270px;">
			<p class="small_fonts menu_font_lg color_white">Paused</p>
			
			<div class="menu_group">
				<p class="small_fonts">Music Volume</p>
				<div class="slider">
					<input class="range_volume" data-type="music" type="range" value="10" step="1" min="0" max="10">
				</div>
			</div>
			
			<div class="menu_group">
				<p class="small_fonts">Effects Volume</p>
				<div class="slider">
					<input class="range_volume" data-type="sfx" type="range" value="10" step="1" min="0" max="10">
				</div>
			</div>
			
		</div>
	</div>
</div>

<div id="loading_teleporter_1"></div>

<!--object inspector box-->
<div id="object_inspector_box" class="">
	<p></p>
</div>

<script src="system/jquery-3.2.1.js"></script>

<script>

//TESTING STUFF

$('.set_season').click(function() {
	World.setSeason($(this).attr('data-season'));
});
$('.set_hair_style').click(function() {
	player.setHairStyle($(this).attr('data-hair'));
});
$('.set_hair_color').click(function() {
	player.setHairColor({r:$(this).attr('data-r'), g:$(this).attr('data-g'), b:$(this).attr('data-b')});
});
$('.spawner').click(function() {
	//position the object right in front of the player, without falling through the ground if the object is taller than the player
	if(typeof Objects[$(this).attr('data-type')][$(this).attr('data-item-id')].scale != 'undefined') {
		var coords_y = (player.coords.y + (player.image.height*player.image.scale)) - (Objects[$(this).attr('data-type')][$(this).attr('data-item-id')].image.h * Objects[$(this).attr('data-type')][$(this).attr('data-item-id')].scale);
	} else {
		var coords_y = (player.coords.y + (player.image.height*player.image.scale)) - Objects[$(this).attr('data-type')][$(this).attr('data-item-id')].image.h;
	}
	World.spawnObject({"type":$(this).attr('data-type'), "object_id":$(this).attr('data-item-id'), "count":1, "coords": { "x":( player.dir == 'left' ? player.coords.x-32 : player.coords.x+32 ), "y": coords_y } });
});

//TESTING STUFF

//resize the canvas
$('#canvas_parent').height( 27*32 ); //27 tiles
$('#canvas_parent').width(window.innerWidth - ( 1 / 5 * window.innerWidth ) );

var config = {
	paused: true,
	pause: function() {this.paused=true;},
	unpause: function() {this.paused=false;},
	frame_rate: 30,
};
config.player_start_coords = {
	x: $('#canvas_parent').width() - ( $('#canvas_parent').width() / 2) - 16,
	y: 673
};
</script>

<script src="Objects.js"></script>
<script src="Hairs.js"></script>
<script src="system/helpers.js"></script>
<script src="System.js"></script>
<script src="CollisionDetection.js"></script>
<script src="Camera.js"></script>
<script src="Hud.js"></script>
<script src="InputManager.js"></script>
<script src="World.js"></script>
<script src="SoundEngine.js"></script>
<script src="Options.js"></script>
<script src="Player.js"></script>

<script>
Options.init();
SoundEngine.init();

hud.init();
World.init();
player.init();

player.coords.x = World.size.x*World.map.tileset.tilewidth - ( (World.size.x*World.map.tileset.tilewidth) / 2) - (World.map.tileset.tilewidth/2);
Camera.offset.x = -player.coords.x + (hud.canvas_parent.width/2) - (World.map.tileset.tilewidth/2);

//fix for blurred scaled images
hud.canvas.mozImageSmoothingEnabled = false;
hud.canvas.webkitImageSmoothingEnabled = false;
hud.canvas.imageSmoothingEnabled = false;

hud.toggleStartMenu();

if(true) { //having to keep clicking the Play button is a pita. lets disable it for now
	hud.toggleStartMenu();
}

//a better approach would be to have a little delta time thing. but for simplicity, a simple interval will do
loop = setInterval(function() {
	if(config.paused && !hud.show_start_menu) return;
	refresh();
	if(hud.show_start_menu) {
		drawStartMenu();
	} else {
		updateGame();
		drawGame();
	}
}, 1000 / config.frame_rate);

</script>

<script>

function drawStartMenu() {
	drawGame();
}

function updateGame() {
	World.update();
	player.update();
	hud.update();
}

function drawGame() {
	hud.canvas.save();
	hud.canvas.translate(Camera.offset.x, Camera.offset.y);
	
	World.draw();
	player.draw();
	hud.draw();
	
	hud.canvas.restore();
}

function quit() {
	clearInterval(loop);
	console.log("quitting");
}

function refresh() {
	//hud.canvas.clearRect(0, 0, hud.canvas_parent.width, hud.canvas_parent.height);
	//if(hud.show_start_menu) {
	//	hud.canvas.fillStyle = hud.start_menu_color;
	//} else {
		hud.canvas.fillStyle = World.sky_color;
	//}
	hud.canvas.fillRect(0, 0, hud.canvas_parent.width, hud.canvas_parent.height);
}
</script>

<script>
$(document).ready(function() {
	
});
</script>
